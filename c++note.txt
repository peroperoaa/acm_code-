c的补充:
1.cout输出char类型。默认输出字符
2.pow括号内幂为浮点数（不能为1/3）

零散篇：
1.sort的cmp函数在遵循先a后b条件下retuan时a与b中间符号即为排序方式(即a<b成立时返回true 而 true不排 最终排序结果则为a<b)

string篇:
1.string有append substr insert find length(size)
2.s.find查找不到子串的时候返回的不是-1，应强制类型转换到int(否则会返回string::npos) （int)s.find(s)
3.string可以直接进行比较(比较字典序)
4.substr(pos,len); 截取从pos个位置开始len个字符
5.insert(pos,str); 在s的第pos个字符前插入str
6.string与char数组类型转换
	char arr[N];string str;
	string ->char数组: 
	strcpy(arr,str.c_str());
	char数组 ->string:
	str=arr;
7.fgets格式为: fgets(str,sizeof(str),stdin); //char str[N];
8.getline格式为:getline(cin,str); //string str;

内存四区：
代码区 (共享, 只读), 全局区 (全局const(全局常量), static (静态变量), 全局变量, 字符串常量), 堆区(new, malloc), 栈区(形式参数, 局部变量)
1.程序运行前:代码区, 全局区	程序运行后:堆区, 栈区
2.全局区的数据在程序结束后由操作系统释放
3.栈区数据注意事项--不要返回局部变量的地址
4.战区数据由编译器管理开辟和释放
5.堆区由程序员分配释放(new, malloc), 若不释放, 程序结束时由操作系统释放
6. int *p = new int(10);	delete p;	
7.int * arr = new int [10]; delete [] arr;

引用篇:
1.引用定义时必须要初始化
2.引用初始化之后不能再改变(指针常量)
3.不要返回局部变量的引用(可返回生命周期长于该函数的变量的引用)
4. 返回值为引用的函数调用可以作为左值

函数篇
1.函数表可以设置默认参数,但必须放在形参后面
2.设置默认参数的变量以传入值为准,没有传入值才使用默认参数
3.函数的声明和实现只能有一个有默认参数
4.占位参数可以有默认参数
5.函数重载
	(1)同一个作用域下 (2)函数名称相同 (3)函数参数类型不同, 或者个数不同, 或者顺序不同
	*函数的返回值不可以作为函数重载的条件
6.引用作为函数重载的条件
	形参为const int &a 与为 int &a 的函数可重载(const int &a处理常数)(int &a 处理引用)
7.传入参数类型:
	const int &a : 常数(在重载类型没有int &a 时可以传入变量)
	int &a : 变量
	int a : 变量 常数
	*函数重载要避免出现二义性(注意默认参数)


类篇
1.三种权限 public(类外可访问) protected(类外不可访问 可继承) private(类外不可访问 类私有)
2.class默认权限为 private struct 默认权限为 public
3.成员权限设置私有可以自己控制读写权限(通过类的成员函数),  可以验证数据有效性(通过类的成员函数控制数据范围)
4.类可以作另一个类的成员
5.编译去会自动调用构造函数( 类名(){} )和析构函数( ~类名(){} ), 如果不提供构造函数和析构函数, 编译器会提供空实现
	在构造对象时会自动调用构造函数, 在对象销毁时回自动调用析构函数
	构造函数和析构函数没有返回值, 不用写void
6.






